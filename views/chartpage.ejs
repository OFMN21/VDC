<!doctype html>
<html Lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>add and remove data</title>

  <link rel="" href="/css/master.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">
  <link rel="stylesheet" href="css/sidebar-menu.css">
  <link rel="stylesheet" href="css/homepage.css">
  <link rel="stylesheet" href="css/chartpage.css">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.min.js"></script>
  <script src="https://code.iconify.design/iconify-icon/1.0.1/iconify-icon.min.js"></script>


</head>

<body>
  <main>
    <header class="p-3 text-bg-dark">
      <div class="container">
        <div class="d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start">
          <a href="#" class="d-block link-dark text-decoration-none " aria-expanded="false">
            <img src="" alt="mdo" width="32" height="32">
          </a>
          <ul class="nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0">
          </ul>
          <div class="text-end">
            <a class="hide_UnderLine btn btn-outline-light me-2" href="/logout">Logout</a>
          </div>
        </div>
      </div>
    </header>
  </main>

  <div class="container text-center">
    <div class="row">
      <div class="col-3">

        <!-- ########### column #1 ############## -->
        <!-- ######### Sidebar ############# -->
        <!-- overflow: auto -->
        <ul style="margin-top: 70px;" class="sidebar-menu vertical-menu">
          <li class="sidebar-header">
            <a style="border-top: 1px solid grey;border-bottom: 1px solid grey;" href="/homepage">
                <iconify-icon style="color: white; " width="25" icon="bi:arrow-left"></iconify-icon>
                <h5 style="color:white; ">Back to Datasets</h5>
            </a>
          </li>
          <li>
            <div class="box" style="height: 475px; overflow: auto ">


              <select id="my-select" style="width:200px;margin: 15px;display:inline;" class="form-select">

                <option value="" selected disabled >Select Chart type</option>
                <option value="bar">Bar Chart</option>
                <option value="line">Line Chart</option>
                <option value="pie">Pie Chart</option>
                <option value="scatter">scatter Chart</option>
                <option value="doughnut">doughnut Chart</option>
              </select>

              <!-- color picker -->
              <!-- <input type="color" class="form-control form-control-color" id="colorPicker" value="#563d7c"> -->
              <hr style="margin-top:150px">
              <h6 style="color:grey;">Click on data to change color</h6>
              <input id="colorPicker" type="color"  style="visibility: hidden;" class="form-control form-control-color"/>


            </div>
          </li>

        </ul>

      </div>
      <div class="col-9">
        <div class="chartBox">
          <canvas id="myChart"></canvas>

        </div>

        <div class="inputBox">
          <input type="number" class="form-control" style="width:200px; display:inline" placeholder="Data value" id="inputdata">
          <input type="text" class="form-control" style="width:200px; display:inline" placeholder="Data" id="inputlabel">
          <button onclick="updateChart()" id="insertdata" class="btn btn-outline-primary" style="margin-bottom:3px;">Add Data</button>
          <hr>
          <input type="number" class="form-control" style="width:100px; display:inline" id="filterdatanumber">
          <select id="filter" style="width:100px; display:inline;" class="form-select" aria-label="Default select example">
            <option value="" selected disabled >Select</option>
            <option value="greater">></option>
            <option value="smaller"><</option>
            <option value="greaterOr">>=</option>
            <option value="smallerOr"><=</option>
            <option value="equal">=</option>


          </select>
          <button onclick="filterChart()" class="btn btn-outline-primary" style="margin-bottom:3px;">Filter Chart</button>

          <div class="row" style="margin-top:40px">
            <button onclick="resetChart()" class="btn btn-outline-primary" style="margin-bottom:3px; width:150px; margin-left:420px;">Reset Chart</button>
          </div>


        </div>
        <button onclick="download()" class="btn btn-secondary" style="margin-top:100px; margin-right:900px">Download</button>


        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

        <script>

          document.getElementById("my-select").addEventListener("change", changeChart);




          var label = <%- JSON.stringify(x)%>
          var data = [<%= y %>]
          const originalLabels = label;
          const originalData = data ;

          var coloR = [];
          var dynamicColors = function() {
            var r = Math.floor(Math.random() * 255);
            var g = Math.floor(Math.random() * 255);
            var b = Math.floor(Math.random() * 255);
            return "rgb(" + r + "," + g + "," + b + ", 0.6)";
          };
          for (var i in originalData) {
           coloR.push(dynamicColors());
          }

          let selected = undefined;
          const ctx = document.getElementById('myChart').getContext('2d');
          var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
              labels: originalLabels,
              datasets: [{
                label: '',
                data: originalData,
                backgroundColor: coloR,
                borderColor: coloR,
                borderWidth: 2
              }]
            },
            options: {
              onClick(evt, elements, chart) {
                if (elements.length) {
                  selected = elements;
                  const colorPicker = document.getElementById("colorPicker");
                  colorPicker.click();
                }
              }
            }
          });


          document.getElementById("colorPicker").addEventListener("change", setColor);
          function setColor() {
            if (selected && selected.length) {
              const colorPicker = document.getElementById("colorPicker");
              for (const el of selected) {
                const {datasetIndex, index} = el;
                const dataset = myChart.data.datasets[datasetIndex];
                dataset.backgroundColor.splice(index, 1, colorPicker.value);
              }
              myChart.update();
            }
          }





          function updateChart() {
            const inputdata = document.getElementById('inputdata');
            const inputlable = document.getElementById('inputlabel');
            myChart.data.datasets[0].data.push(inputdata.value);
            myChart.data.datasets[0].backgroundColor.push(dynamicColors());
            myChart.data.labels.push(inputlabel.value);
            myChart.update()
          }


          // function filterChart
          function filterChart() {
            myChart.data.datasets[0].data = originalData;
            myChart.data.labels = originalLabels;
            const filterdatanumber = document.getElementById('filterdatanumber').value;
            const value = document.getElementById('filter').value;
            var filterData=null;
            // filter array.filter command
            // var value = this.value;
            console.log(value);
            switch (value) {
              case 'greater':
                      filterData = myChart.data.datasets[0].data.filter(value => value >
                      filterdatanumber);

                  break;
              case 'smaller':
                      filterData = myChart.data.datasets[0].data.filter(value => value <
                      filterdatanumber);

                  break;
              case 'greaterOr':
                       filterData = myChart.data.datasets[0].data.filter(value => value >=
                       filterdatanumber);

                  break;

              case 'smallerOr':
                        filterData = myChart.data.datasets[0].data.filter(value => value <=
                        filterdatanumber);

                  break;
              case 'equal':
                      filterData = myChart.data.datasets[0].data.filter(value => value ==
                      filterdatanumber);

                  break;
              default:
                    console.log("wrong");
            }

            // create 2 new arrays for the labels + colors.
            const filterLabels = [];
            const filterColors = [];
            // for loop + loop through the array get the matching value index0f()
            let i = 0;
            for (i; i < filterData.length; i++) {
              const result = myChart.data.datasets[0].data.indexOf(filterData[i]);
              const labelresult = myChart.data.labels[result];
              // const colorsresult = myChart.data.datasets[0].backgroundColor[coloR];
              //push this into the new array
              filterLabels.push(labelresult);
              // filterColors.push(colorsresult);


            }
            // reassign the array into the chart.
            myChart.data.datasets[0].data = filterData;
            myChart.data.labels = filterLabels;
            // myChart.data.datasets[0].backgroundColor = filterColors;

            // update chart
            myChart.update()
          }

          function resetChart() {
            console.log(label);
            console.log("xxxx");
            console.log(data);
            myChart.data.datasets[0].data = originalData;
            myChart.data.labels = originalLabels;
            myChart.update();
          }


           function download(){
            const imageLink =  document.createElement('a');
            const canvas =  document.getElementById('myChart');
            imageLink.download = 'chart.png';
            imageLink.href =  canvas.toDataURL('image/png',1);
            imageLink.click();
          }


          function changeChart(){
            var value = this.value;
            console.log(value);
            switch (value) {
              case 'line':
                  const updatetype = 'line';
                  myChart.config.type = updatetype;
                  myChart.update();
                  break;
              case 'bar':
                  const updatetype2 = 'bar';
                  myChart.config.type = updatetype2;
                  myChart.update();
                  break;
              case 'pie':
                  const updatetype3 = 'pie';
                  myChart.config.type = updatetype3;
                  myChart.update();
                  break;

              case 'doughnut':
                  const updatetype4 = 'doughnut';
                  myChart.config.type = updatetype4;
                  myChart.update();
                  break;
              case 'scatter':
                  const updatetype5 = 'scatter';
                  myChart.config.type = updatetype5;
                  myChart.update();
                  break;
              default:
                    console.log("wrong chart type");
            }
          };



        </script>
      </div>
    </div>
  </div>

</body>

</html>
